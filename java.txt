JDK contains developer tools(compiling,debugging etc.) and JRE(provide runtime-environment only for execution purpose). JRE again contains JVM(convert byte-code to machine code) and libraries(packages).
Variables:
  1. Instance varialble
  2.Class(Static) varialble
  3.Local varialble
  We can use _ and $ as special symbols in variable naming.


Primitive Datatypes:
  1.Integers-byte(8bits),short(16bits),int(32bits),long(64bits)
  2.Floating-point numbers-float(32bits),double(64bits)
  3.Characters-char(16bits)
  4.Boolean-boolean(1bit)


Bitwise operators:
  ~ not
  | or
  & and
  ^ xor
  >> right shift
  << left shift
  >>> right shift zero fill


instanceof() used to check whether an object is an instance of a class or a class implementing a particular interface.
null is not instance of anything.
class InstanceofDemo {
    public static void main(String[] args) {

        Parent obj1 = new Parent();
        Parent obj2 = new Child();

        System.out.println("obj1 instanceof Parent: " +
            (obj1 instanceof Parent));
        System.out.println("obj1 instanceof Child: " +
            (obj1 instanceof Child));
        System.out.println("obj1 instanceof MyInterface: " +
            (obj1 instanceof MyInterface));
        System.out.println("obj2 instanceof Parent: " +
            (obj2 instanceof Parent));
        System.out.println("obj2 instanceof Child: " +
            (obj2 instanceof Child));
        System.out.println("obj2 instanceof MyInterface: " +
            (obj2 instanceof MyInterface));
    }
}
class Parent {}
class Child extends Parent implements MyInterface {}
interface MyInterface {}
Output:
obj1 instanceof Parent: true
obj1 instanceof Child: false
obj1 instanceof MyInterface: false
obj2 instanceof Parent: true
obj2 instanceof Child: true
obj2 instanceof MyInterface: true


for-each loop is essentially read-only.
for(type itr-var : collection) statement-block


forEach():
    iterable.forEach(item -> action)
        List<String> gamesList = new ArrayList<String>();
        gamesList.add("Football");
        gamesList.add("Cricket");
        gamesList.add("Chess");
        gamesList.add("Hocky");
        gamesList.forEach(games -> System.out.println(games));  //Print all elements of gamesList


Arrays:
type[] name=new type[size];
type name[]=new type[size];
int[] a={1,2,3}
type[][] name=new type[row][column];
type name[][]=new type[row][column];
int[][] b={{1,2,3},{1,2,3}};


Methods of copying arrays:
    1.System.arraycopy()
        System.arraycopy(src,srcPos,dest,destPos,length);
        src=source array
        srcPos=starting position in source array to start copying from
        dest=destination array
        destPos=starting position in destination array from copying
        length=number of elements to be copied
    2.Arrays.copyOf()
        destination_array=Arrays.copyOf(source_array,no_of_elements_to_be_copied);
    3.Object.clone()
        destination_array=source_array.clone();


final keyword:
    1.final variable can be assigned vlaue once.
    2.final method can't be overriden by child class.
    3.final class prevent other class to extend it.
    4.final object prevent reference changing of that object.
        final String a= new String("John");
        a=new String("Lee");    // not allowed

Convert array into ArrayList:
    1.Arrays.asList()
        String anArrayOfStrings[] = { "Agra", "Mysore", "Chandigarh", "Bhopal" };
        List<String> strList = Arrays.asList(anArrayOfStrings);
    2.Collection.addAll()-addAll() method adds all of the specified elements to the specified collection. Elements to be added may be specified individually or as an array.
        final String array[] = { "abc", "xyz", "pqr", "XYZ" };
        final ArrayList<String> arraylist = new ArrayList<String>();
        Collections.addAll(arraylist, array);
    3.Conversion manually:
        final String array[] = { "abc", "xyz", "pqr", "XYZ" };
        final ArrayList<String> arraylist=new ArrayList<>();
        for(int i=0;i<array.length;i++)
            arraylist.add(array[i]);
        arraylist.forEach(e -> System.out.println(e));


toString() method:
    This method is contained in Object class thus available for all classes. Default behavior of toString() is to print class name, then @, then unsigned hexadecimal representation of the hash code of the object.
        public String toString()
        {
            return getClass().getName() +"@"+Integer.toHexString(hashCode());
        }
    If we want proper information about object then we have to override toString() method.
        public String toString()
        {
            return name + " " + age + " " + college + " "
            + course + " " + address;
        }
     In all wrapper classes, all collection classes, String class, StringBuffer, StringBuilder classes, toString() method is overridden for meaningful String representation.So no need to override in this case until necessary.


Object class methods:
    protected Object clone()
    boolean equals(Object obj)
    protected void finalize()
    Class<?> getClass()
    int hashCode()
    void notify()
    void notifyAll()
    void wait()
    String toString()
    The notify, notifyAll, and wait methods of Object all play a part in synchronizing the activities of independently running threads in a program. There are five of these methods:
        public final void notify()
        public final void notifyAll()
        public final void wait()
        public final void wait(long timeout)
        public final void wait(long timeout, int nanos)
    For more information:https://www.javaguides.net/2018/09/object-class-methods-in-java-with-examples.html


hashCode() method:
    Hashing is the process of mapping the data to some representative integer value using the concept of hashing algorithms.
    hashCode() in Java is a function that returns the hashcode value of an object on calling. It returns an integer or a 4 bytes value which is generated by the hashing algorithm.
    The process of assigning a unique value to an object or attribute using an algorithm, which enables quicker access, is known as hashing.
    Types of hashCode() methods:
        1.public int hashCode()-This belongs to Java Integer class and returns the hashcode of the current object, which is equal to the primitive int value.
        2.public static int hashCode(int value)-returns the hashcode for the integer“value” passed through the function.




Convert ArrayList to array:
    1.toArray()
        List<String> strList = new ArrayList<>();
        strList.add("abc");
        strList.add("xyz");
        strList.add("pqr");
        strList.add("mno");
        String[] strArr = new String([strList.size()]);
        strArr=strList.toArray();
        System.out.println(Arrays.toString(strArr));
    2.Manual Conversion
        List<String> strList = new ArrayList<>();
        strList.add("abc");
        strList.add("xyz");
        strList.add("pqr");
        strList.add("mno");
        String[] strArr = new String([strList.size()]);
        for (int i = 0; i < strList.size(); i++)
        {
            strArr[i] = strList.get(i);
        }
        System.out.println(Arrays.toString(strArr));


java.util.Arrays class APIs or Methods:
    1.Convert Array to List
    2.Searching an Array
    3.Sorting an Array
    4.Copies an Array
    5.Check two Arrays are Deeply equal
    6.Filling values in an Array
    7.String representation of Array
    8.Sorting Strings
    9.Sorting Dates
    For details:https://www.javaguides.net/2018/08/java-util-arrays-class-api-guide.html


Lambda Expressions:
    A lambda expression is a short block of code which takes in parameters and returns a value.
        numbers.forEach( (n) -> { System.out.println(n); } );
    Lambda expressions can be stored in variables if the variable's type is an interface which hs only one method with same number of parameters and return type as that of lambda expression.
        interface MyInterface{
            public void display();
        }
        ArrayList<Integer> numbers = new ArrayList<>();
        numbers.add(5);
        numbers.add(8);
        numbers.add(2);
        numbers.add(1);
        MyInterface ref = n -> System.out.println(n);
        numbers.forEach(ref);



Anonymous class:
    In Java, a class can contain another class known as nested class. It's possible to create a nested class without giving any name.A nested class that doesn't have any name is known as an anonymous class.Anonymous class is useful when we have to create an instance of the object with overloading methods of a class or interface without creating a subclass of class.
        class OuterClass{
            Type object1 = new Type(parameterList){
                //body of anonymous class
            };
        }
        Here, Type can be :
            1.A superclass that an anonymous class extends
            2.An interface that an anonymous class implements
        In case if this superclass or interface has only one method then we can use lambda expression to make anonymous class.
            interface A{
                public void greet();
            }
            class B{
                A obj=() -> System.out.println("Hello World!");
                obj.greet();
            }


OOPs:-
    Ways to create new objects in Java:
        1.Using the new keyword
        2.Using newInstance() method of Class class:
            public class Student{
                ...
            }
            public static void main(String[] args){
                String className="Student";  //name of class whose object to be made
                Class clazz=Class.forName(className);  //load the class into Class object
                Student student1=(Student) clazz.newInstance();  //create object of Student class
            }
        3.Using newInstance() method of Constructor class:
            import java.lang.reflect.Constructor;
            import java.lang.reflect.InvocationTargetException;
            public class Student{
                ...
            }
            Constructor < Student > constructor;
            try {
                constructor = Student.class.getConstructor();
                Student student = constructor.newInstance();
                System.out.println(student.getName());
                System.out.println(student.getCollege());
            }
            catch (InstantiationException | IllegalAccessException |    IllegalArgumentException | InvocationTargetException |
            NoSuchMethodException | SecurityException e)
            {
                e.printStackTrace();
            }
        4.Using Object Deserialization:
            In this approach, we will be using Serializable interface in Java which is a marker interface(interface with no fields or methods within it) for serializing a Java Student Object s1 into a text file (sample.txt) and using object deserialization we will be reading and assigning it to a new Student object s2.
                import java.io.Serializable;
                import java.io.FileInputStream;
                import java.io.FileOutputStream;
                import java.io.ObjectInputStream;
                import java.io.ObjectOutputStream;
                public class Student{
                    ...
                }
                main{
                    String filePath = "sample.txt";
                    Student s1 = new Student("Ramesh", "ABC");
                    try {
                        FileOutputStream fileOutputStream = new     FileOutputStream(filePath);
                        ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream);
                        outputStream.writeObject(s1);
                        outputStream.flush();
                        outputStream.close();

                        FileInputStream fileInputStream = new FileInputStream(filePath);
                        ObjectInputStream inputStream = new     ObjectInputStream(fileInputStream);
                        Student s2 = (Student) inputStream.readObject();

                        inputStream.close();

                        System.out.println(s2.getName());
                        System.out.println(s2.getCollege());
                    }
                    catch (Exception ee) {
                        ee.printStackTrace();
                    }
                }

        5.Using Object Cloning- clone() method:
            The clone() method is used to create a copy of an existing object, in order to the clone() method the corresponding class should have implemented a Cloneable interface which is again a Marker Interface.
                import java.io.Serializable;
                public class Student{
                    ...
                }
                main{
                    Student student1 = new Student("Ramesh", "ABC");
                    try {
                        Student student2 = (Student)    student1.clone();
                        System.out.println(student2.getName());
                        System.out.println(student2.getCollege());
                    }
                    catch (CloneNotSupportedException e) {
                        e.printStackTrace();
                    }
                }

    
    Interfaces in Java:
        Interfaces are just contracts or signatures and they don't know anything about implementation.
        We can’t create an instance(interface can’t be instantiated) of an interface but we can make reference to it that refers to the Object of its implementing class.
        A class can implement more than one interface.
        An interface can extends another interface or interfaces (more than one interface) .
        A class that implements interface must implements all the methods in interface.
        All the methods are public and abstract. And all the fields are public, static, and final.
        It is used to achieve multiple inheritance.
        
        Default methods:Only declared within the interface and must be marked by default keyword.It must have a method body.
            public interface interface1{
                default String turnAlarm(){
                    return "Alarm off";
                }
                String getBrand();
            }

        Multiple interface inheritance:If multiple interfaces implemented have same default methods then to solve this ambiguity, we can use two ways:
        1. Override the default methods in concrete class
            public interface interface1{
                default String method1{
                    return "interface1";
                }
            }
            public interface interface2{
                default String method1{
                    return "interface2";
                }
            }
            public class test implements interface1,interface2{
                @Override
                public String method1{
                    return "class test";
                }
            }
        2. Use the default methods of those interfaces as it is.
            public interface interface1{
                default String method1{
                    return "interface1";
                }
            }
            public interface interface2{
                default String method1{
                    return "interface2";
                }
            }
            public class test implements interface1,interface2{
                @Override
                public String method1{
                    interface1.super.method1;    // calls inteface1 method1
                    // inteface2.super.method2;  //calls interface2 method1
                }
            }
        
        Static method:Interfaces can also contains static methods.


    Abstract classes in Java: It may or may not include abstract methods.They can't be instantiated but can be subclassed.
    A method defined abstract must always be redefined in the subclass, thus making overriding compulsory OR either make subclass itself abstract.
    Any class that contains one or more abstract methods must also be declared with abstract keyword.
    There can be no object of an abstract class. That is, an abstract class can not be directly instantiated with the new operator.
    An abstract class can have parameterized constructors and default constructor is always present in an abstract class. Constructors are called by super keyword by clild class.
    An abstract class can implement interface without implementing all of interface's methods.


    Abstraction in Java: 
        Abstraction is archieved via abstract classes and interfaces.It is the process of gaining information.The complexity of implementation is hidden using interface and abstract class.
        It focus on 'what' should be done.It is the method of hiding the unwanted information.It focus on implementation hiding.
        public abstract class Employee{
         private int hours;
            public int claculateSalary();
            public Employee(int data){
                this.hours=data;
            }
            public int getHours(){
             return this.hours;
            }
        }
        public class Contractor extends Employee{
            public Contractor(int data){
                super(data);
            }
            public int claculateSalary(){
                return getHours * 50;
            }
        }
    

    Encapsulation in Java:
        It refers to combining data and associated  methods as a single unit. It is implemented via access modifiers like public, private and protected.The data is hidden using methods like getters and setters.It focus on 'how' it should be done.It is also called data-hiding.It focus on information hiding.

    Abstraction hides irrelevant data using interface and abstract class while Encapsulation hides all the data and methods implementing the data using access modifiers.
    

    Inheritance in Java:
        It is a IS-A relationship signifying that one object is a type of another.
        Types of inheritance:
            1. Single inheritance: B extends A.
            2. Milti-level inheritance:  C extends B , B extends A.
            3. Hierarchical inheritance: B extends A , C extends A.
            4. Multiple inheritance(via interfaces): Java doesn't support multiple inheritance via classes but with interfaces it does.
            5. Hybrid inheritance(via Interfaces): D extends B and C , B and C extends A.


    Polymorphism in Java:
        The process of representing one form in multiple forms.
        Types:
            1. Compile time Polymorphism: Using method overloading.
            2. Runtime Polymorphism: Using method overriding.
                class Parent{
                    public void display(){
                        System.out.println("Parent class");
                    }
                }
                class A extends Parent{
                    @Override
                    public void display(){
                        System.out.println("Class A");
                    }
                }
                class B extends Parent{
                    @Override
                    public void display(){
                        System.out.println("Class B");
                    }
                }
                main(){
                    Parent p=new Parent();
                    p.display();        //Parent class
                    p=new A();
                    p.display();        //Class A
                    p=new B();
                    p.display;          //Class B
                }
                

    Composition in Java:
        It is an association that represents a part of a whole relationship where a part cannot exist without a whole.e.g. A university consists of several departments, if university is destroyed then departments will also be destroyed.
        Example: Let's take the example of Placing order. If order 'HAS-A' line items it means an order is a whole and line-items are parts(HAS-A is a name given to relationship between order and line-items). If order is deleted the all corresponding line-items for that order should be deleted.
        class Product{
            private int id;
            private String name;
            private String description;
            public Product(int id, String name, String description){
                super();
                this.id=id;
                this.name=name;
                this.description=description;
            }
            public int getId(){
                return id;
            }
            public void setId(int id){
                this.id=id;
            }
            public String getName(){
                return name;
            }
            public void setName(String name){
                this.name-name;
            }
            public String getDescription(){
                return description;
            }
            public void setDescription(String description){
                this.description=description;
            }
            @Override
            public String toString(){
                return "Product [id=" + id + ", name=" + name + ", description=" + description + "]";
            }
        }
        class LineItem {
            private int id;
            private int quantity;
            private Product p;

            public LineItem(int id, int quantity, Product p) {
            super();
            this.id = id;
            this.quantity = quantity;
            this.p = p;
            }
            public int getId() {
                return id;
            }
            public void setId(int id) {
                this.id = id;
            }
            public int getQuantity() {
                return quantity;
            }
            public void setQuantity(int quantity) {
                this.quantity = quantity;
            }
            public Product getP() {
                return p;
            }
            public void setP(Product p) {
                this.p = p;
            }
            @Override
            public String toString() {
                return "LineItem [id=" + id + ", quantity=" + quantity + ", p=" + p + "]";
            }
        }
        class Order{
            private int id;
            private String name;
            private List<LineItem> lineitems;
            public Order(int id, String name){
                super();
                this.id=id;
                this.name=name;
                this.lineitems=new ArrayList<LineItem>();
            }
            public int get id(){
                return id;
            }
            public void setId(int id){
                this.id=id;
            }
            public String getName(){
                return name;
            }
            public void setName(String name){
                this.name=name;
            }
            @Override
            public String toString(){
                return "Order [id=" + id + ", name=" + name + ", lineItems=" + lineItems + "]";
            }
            public void addItem(int id,int quantity,Product p){
                this.lineItems.add(new LineItem(id, quantity, p));
            }
            public void removeItemById(int itemid){
                Iterator<LineItem> itr = this.iterator();
                while(itr.hasNext()){
                    LineItem l=itr.next();
                    if(l.id==id)
                        itr.remove();
                }
            }
        }
        public class CompositionDemo {
            public static void main(String[] args) {
                // Create Products
                Product p1 = new Product(1, "Pen", "This is red pen");
                Product p2 = new Product(2, "Pencil", "This is pencil");
                Product p3 = new Product(3, "ColorBox", "This is color box");
                // Create Order and Add Line Items
                Order o = new Order(1, "ORD#1");
                o.addItem(1, 2, p1); // Ordered of 2 quantity for p1 product
                o.addItem(2, 1, p2); // Ordered of 1 quantity for p2 product
                o.addItem(3, 5, p3); // Ordered of 5 quantity for p3 product  
                // Print Order detail before deleting 
                System.out.println("Order ---");
                System.out.println(o);
                // Deleting order would also delete associated LineItems   
                o = null;  
            }
        }


    Aggregation in Java:
        Aggregation is an association that represents a part of a whole relationship where a part can exists without a whole. It has a weaker relationship.e.g. relationship between the Department and the Teacher.A Teacher may belong to multiple departments. If the Department is deleted , the Teacher object will not destroy.
        Example: Let's take the example of LineItem and its Products. If line-item HAS-A product, then a line item is a whole and product is a part. If a line-item is deleted, then the corresponding product needs not to be deleted.
        class Product{
            private int id;
            private String name;
            private String description;
            public Product(int id, String name, String description){
                super();
                this.id=id;
                this.name=name;
                this.description=description;
            }
            public int getId(){
                return id;
            }
            public void setId(int id){
                this.id=id;
            }
            public String getName(){
                return name;
            }
            public void setName(String name){
                this.name-name;
            }
            public String getDescription(){
                return description;
            }
            public void setDescription(String description){
                this.description=description;
            }
            @Override
            public String toString(){
                return "Product [id=" + id + ", name=" + name + ", description=" + description + "]";
            }
        }
        class LineItem {
            private int id;
            private int quantity;
            private Product p;

            public LineItem(int id, int quantity, Product p) {
            super();
            this.id = id;
            this.quantity = quantity;
            this.p = p;
            }
            public int getId() {
                return id;
            }
            public void setId(int id) {
                this.id = id;
            }
            public int getQuantity() {
                return quantity;
            }
            public void setQuantity(int quantity) {
                this.quantity = quantity;
            }
            public Product getP() {
                return p;
            }
            public void setP(Product p) {
                this.p = p;
            }
            @Override
            public String toString() {
                return "LineItem [id=" + id + ", quantity=" + quantity + ", p=" + p + "]";
            }
        }
        public class Aggregation{
            public static void main(String[] args){
                Product p1=new Product(1,"Pen","This is red pen");
                Product p2=new Product(2,"Pencil","This is pencil");
                Product p3=new Product(3,"ColorBox","This is color box");
                LineItem item1 = new LineItem(1, 2, p1);
                LineItem item2 = new LineItem(1, 2, p2);
                LineItem item3 = new LineItem(1, 2, p3);
                // Before deleting line-item 1
                System.out.println(item1.getId());
                System.out.println(item1.getQuantity());
                System.out.println(item1.getP())
                item1=null;
                // Still product exists
                System.out.println(p1);
            }
        }


    Difference between Aggregation and Composition:
        Aggregation: 
            It is weak association.
            A uses B.
            HAS-A relationship. A has B.
            Denoted by empty diamond in UML.
            We don't use final keyword for Aggregation.
        Composition:
            It is strong association.
            A owns B.
            PART-OF relationship. B is part of A.
            Denoted by filled diamond in UML.
            final keyword is used to represent Composition because the owner object expects a part object to be available and function by making it 'final'.


    



    




